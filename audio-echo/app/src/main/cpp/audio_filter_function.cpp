

#include "audio_filter_function.h"
#include <limits.h>

#define BYTES_PER_SAMPLE 2

/*
#define FILTER_LEN 133
static double filter[FILTER_LEN]={
        -0.00251195856191940,-0.00771493498504426,0.0123238435867891,0.00276269358949353,0.00163826929876858,-0.000448907308876010,-0.00150765791236110,-0.00218678998881337,-0.00245545643843869,-0.00239714382646195,-0.00205303863885371,-0.00146359012550524,-0.000687943772596985,0.000202725225474017,0.00111543724274854,0.00194514651023440,0.00259060765370003,0.00294354289352368,0.00294593289925645,0.00254436776109323,0.00177028851553932,0.000665061732127794,-0.000636956088051691,-0.00199502340976939,-0.00322979931611484,-0.00414748700146397,-0.00461486359043769,-0.00449614389712351,-0.00376713817269671,-0.00245131988293916,-0.000650148247279889,0.00142844329570633,0.00354538166739983,0.00542577136028022,0.00677296321220819,0.00736793844004101,0.00705865655403686,0.00576237997883296,0.00354014540315877,0.000598176508354698,-0.00276591321593921,-0.00616086474050398,-0.00914974938384278,-0.0112822892275652,-0.0121848554092135,-0.0115782830667398,-0.00935415201147851,-0.00558092921844618,-0.000537349190877244,0.00530753380403450,0.0113252488452772,0.0167732042431570,0.0208662665968360,0.0228652737647545,0.0221329919369163,0.0182379660056965,0.0109891832602127,0.000489359717314083,-0.0128639400121205,-0.0283826935034764,-0.0451530667789250,-0.0620842675890878,-0.0780304461975866,-0.0918482898341263,-0.102526339936455,-0.109272599948187,0.888418309153234,-0.109272599948187,-0.102526339936455,-0.0918482898341263,-0.0780304461975866,-0.0620842675890878,-0.0451530667789250,-0.0283826935034764,-0.0128639400121205,0.000489359717314083,0.0109891832602127,0.0182379660056965,0.0221329919369163,0.0228652737647545,0.0208662665968360,0.0167732042431570,0.0113252488452772,0.00530753380403450,-0.000537349190877244,-0.00558092921844618,-0.00935415201147851,-0.0115782830667398,-0.0121848554092135,-0.0112822892275652,-0.00914974938384278,-0.00616086474050398,-0.00276591321593921,0.000598176508354698,0.00354014540315877,0.00576237997883296,0.00705865655403686,0.00736793844004101,0.00677296321220819,0.00542577136028022,0.00354538166739983,0.00142844329570633,-0.000650148247279889,-0.00245131988293916,-0.00376713817269671,-0.00449614389712351,-0.00461486359043769,-0.00414748700146397,-0.00322979931611484,-0.00199502340976939,-0.000636956088051691,0.000665061732127794,0.00177028851553932,0.00254436776109323,0.00294593289925645,0.00294354289352368,0.00259060765370003,0.00194514651023440,0.00111543724274854,0.000202725225474017,-0.000687943772596985,-0.00146359012550524,-0.00205303863885371,-0.00239714382646195,-0.00245545643843869,-0.00218678998881337,-0.00150765791236110,-0.000448907308876010,0.00163826929876858,0.00276269358949353,0.0123238435867891,-0.00771493498504426,-0.00251195856191940l;
};
 */
/*#define FILTER_LEN 89
static double filter[FILTER_LEN]={
        -0.00958445992241334,0.00765714003298465,0.00490757530296641,0.00283062926652611,0.00114290517058216,-0.000323682373443875,-0.00161505291609860,-0.00268504665549671,-0.00341205107456706,-0.00366631480805515,-0.00332728591724168,-0.00236429364213392,-0.000827262677165527,0.00110484112310318,0.00315360120633875,0.00497321206584501,0.00619704703206402,0.00650380356147682,0.00569195030164805,0.00372330735840935,0.000759266915328671,-0.00284153978427137,-0.00654634572111544,-0.00972583662854182,-0.0117319912374237,-0.0120177888991654,-0.0102328599373878,-0.00633022606309394,-0.000603458603678626,0.00630878806373834,0.0134667333076784,0.0197113539509552,0.0238068828903537,0.0246035007524045,0.0212262561884194,0.0131781752066139,0.000463126046877484,-0.0163697495120965,-0.0362058145599439,-0.0575660256456327,-0.0786349099866004,-0.0975225661354511,-0.112492467377380,-0.122089178095630,0.874596649387228,-0.122089178095630,-0.112492467377380,-0.0975225661354511,-0.0786349099866004,-0.0575660256456327,-0.0362058145599439,-0.0163697495120965,0.000463126046877484,0.0131781752066139,0.0212262561884194,0.0246035007524045,0.0238068828903537,0.0197113539509552,0.0134667333076784,0.00630878806373834,-0.000603458603678626,-0.00633022606309394,-0.0102328599373878,-0.0120177888991654,-0.0117319912374237,-0.00972583662854182,-0.00654634572111544,-0.00284153978427137,0.000759266915328671,0.00372330735840935,0.00569195030164805,0.00650380356147682,0.00619704703206402,0.00497321206584501,0.00315360120633875,0.00110484112310318,-0.000827262677165527,-0.00236429364213392,-0.00332728591724168,-0.00366631480805515,-0.00341205107456706,-0.00268504665549671,-0.00161505291609860,-0.000323682373443875,0.00114290517058216,0.00283062926652611,0.00490757530296641,0.00765714003298465,-0.00958445992241334;
};*/
/*
#define FILTER_LEN 67
static double filter[FILTER_LEN]={
        -0.00463915483000333,0.00453259058045183,0.00960700072513595,-0.00788542962167635,-0.00164918276924328,-0.00634394904400255,0.000168916738756713,0.00119001929833199,0.00589748947308544,0.00539390641465712,0.00385495159789513,-0.00151264653632119,-0.00629591127201898,-0.00932962353666962,-0.00745196962132782,-0.00134280377169945,0.00713420240665190,0.0135261694199569,0.0141162231934966,0.00706292690271792,-0.00553788341323885,-0.0183030850487652,-0.0243571485088449,-0.0187006609231165,-0.00105509942111981,0.0226536657912415,0.0417312146061623,0.0442596265200462,0.0219719896537886,-0.0257376776628039,-0.0903155427776671,-0.156059733165804,-0.205041687371550,0.776859879413805,-0.205041687371550,-0.156059733165804,-0.0903155427776671,-0.0257376776628039,0.0219719896537886,0.0442596265200462,0.0417312146061623,0.0226536657912415,-0.00105509942111981,-0.0187006609231165,-0.0243571485088449,-0.0183030850487652,-0.00553788341323885,0.00706292690271792,0.0141162231934966,0.0135261694199569,0.00713420240665190,-0.00134280377169945,-0.00745196962132782,-0.00932962353666962,-0.00629591127201898,-0.00151264653632119,0.00385495159789513,0.00539390641465712,0.00589748947308544,0.00119001929833199,0.000168916738756713,-0.00634394904400255,-0.00164918276924328,-0.00788542962167635,0.00960700072513595,0.00453259058045183,-0.00463915483000333
};
 */
#define FILTER_LEN 49
static double filter[FILTER_LEN]={
        -0.0131225585937500,0.0264282226562500,0.000976562500000000,-0.00924682617187500,-0.0111999511718750,-0.00781250000000000,-0.000885009765625000,0.00720214843750000,0.0130310058593750,0.0132141113281250,0.00640869140625000,-0.00561523437500000,-0.0177001953125000,-0.0233764648437500,-0.0177612304687500,-0.000610351562500000,0.0225524902343750,0.0411376953125000,0.0434570312500000,0.0212707519531250,-0.0261535644531250,-0.0903320312500000,-0.155731201171875,-0.204498291015625,0.777465820312500,-0.204498291015625,-0.155731201171875,-0.0903320312500000,-0.0261535644531250,0.0212707519531250,0.0434570312500000,0.0411376953125000,0.0225524902343750,-0.000610351562500000,-0.0177612304687500,-0.0233764648437500,-0.0177001953125000,-0.00561523437500000,0.00640869140625000,0.0132141113281250,0.0130310058593750,0.00720214843750000,-0.000885009765625000,-0.00781250000000000,-0.0111999511718750,-0.00924682617187500,0.000976562500000000,0.0264282226562500,-0.0131225585937500
};

inline int16_t  clampAudioSample(double sample) {
  return (int16_t) (sample > SHRT_MAX ? SHRT_MAX :
            (sample < SHRT_MIN ? SHRT_MIN : (int16_t)(sample + 0.5f)));
}

static int16_t residue[FILTER_LEN];
static int16_t* cacheBuffer = nullptr;
volatile bool busy = false;
volatile bool stopPending = false;

static void cleanUpFilter(void) {
  delete [] cacheBuffer;
  cacheBuffer = nullptr;
}

int16_t* convolution(int16_t *samples,int sampleCount)
{
  if (stopPending) {
    stopPending = false;
    cleanUpFilter();
    return samples;
  }

  busy = true;
  int32_t idx = 0;
  for (idx = 0; idx < (FILTER_LEN - 1); idx++) {
    double filterSample = static_cast<double>(0.0f);
    int32_t tapIdx = 0;
    for (; tapIdx < FILTER_LEN - 1 - idx; tapIdx++) {
      filterSample += residue[idx + tapIdx] * filter[tapIdx];
    }
    int32_t curTapIdx  = tapIdx;
    for (; tapIdx < FILTER_LEN; tapIdx++) {
      filterSample += samples[tapIdx - curTapIdx] * filter[tapIdx];
    }
    cacheBuffer[idx] = clampAudioSample(filterSample);
  }

  for(idx = FILTER_LEN -1; idx < sampleCount; idx++) {
    double filterSample = static_cast<double>(0.0f);
    for (uint32_t tapIdx = 0; tapIdx < FILTER_LEN; tapIdx++) {
      filterSample += samples[idx - tapIdx] * filter[tapIdx];
    }
    cacheBuffer[idx] = clampAudioSample(filterSample);
  }
  // save residues back
  memcpy(residue, &samples[sampleCount - (FILTER_LEN - 1)],
         (FILTER_LEN - 1 ) * BYTES_PER_SAMPLE);

  int16_t* retBuf = cacheBuffer;
  cacheBuffer = samples;
  if (stopPending) {
    stopPending = false;
    cleanUpFilter();
  }
  busy  = false;
  return retBuf;
}

/*
 * Note: this function is pass-through right now. The real implementation
 * must have some bug in it: it crashes the app.
 */
void FilterFunc_FilterFrame(sample_buf *container) {

  if(cacheBuffer == nullptr)
    return;

  container->buf_ = (uint8_t*)convolution((int16_t*)container->buf_,
                                           container->size_/BYTES_PER_SAMPLE);
  (void) filter;
}

bool FilterFunc_Init(void *buf, uint32_t sizeInBytes) {
  assert(cacheBuffer == nullptr);
  memset(buf, 0, sizeInBytes);
  cacheBuffer = (int16_t*)buf;
  memset(residue, 0, sizeof(residue));
  return true;
}

void* FilterFunc_Fini(void) {
    if (busy) {
      stopPending = true;
      return nullptr;
    }
    void *buf = cacheBuffer;
    cacheBuffer = nullptr;
    return buf;
}
